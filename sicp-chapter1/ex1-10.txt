(define (A x y) 
	(cond ((= y 0) 0) 
		(( x 0) (* 2 y)) 
		((= y 1) 2) 
		(else (A (- x 1) 
			(A x (- y 1))))))


(A 1 10) = 1024
(A 2 4) = 65536
(A 3 3) = 65536




Consider the following procedures, where A is the procedure defined above: 
(define (f n) (A 0 n)) 
(define (g n) (A 1 n)) 
(define (h n) (A 2 n)) 
(define (k n) (* 5 n n))



the procedure (f n) computes ->
(A 0 n)
2 * n


the procedure (g n) computes -> 
(A 1 n)
(A (- 1 1) (A 1 (- n 1)))
(A 0 (A 1 "n-1"))
(A 0 (A ( - 1 1) (A 1 ( - "n-1" 1 )))
this will keep going until the "y" argument reaches 1....then it will evaluate to 2, and start to evaluate all other "A" procedures
(A 0 (A 0 (A 0 ... (A 1 1)))
this will happen exactly "n-1" times, so we will have "n-1" nested "A" procedures
the result will then be 2 * 2^(n-1)  ->
2^n

but if n=0, the procedure (g n) will compute (A 0 0), which is 
0




the procedure (h n) computes ->
(A 2 n)
(A (- 2 1) (A 2 (- n 1))
(A 1 (A 2 "n-1"))
(A 1 (h "n-1))
(A 1 (A 1 (A 1 (A 1... (h 1)) ---> "A" procedure is nested "n-1" times
(A 1 (A 1 (A 1 (A 1... (A 2 1))
(A 1 (A 1 (A 1 (A 1... 2))
(A 1 (A 1 (A 1 ...(A 1 2)) -> but (A 1 2) we know is 2^n
(A 1 (A 1 (A 1 ...2^n)
(A 1 (A 1 ... (A 1 2^n)) -> similarly (A 1 2^n) is 2^(2^n)
this will happen exactly "n-1" times
2^(2^....^2) -> "n-1" times
but this is recursive, so we can define it as
2^(h n-1)





