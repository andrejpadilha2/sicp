(define (timed-prime-test n)
	(start-prime-test n (runtime))
)

(define (start-prime-test n start-time)
	(if (fast-prime? n 100) 
		(report-prime n (- (runtime) start-time)) 
		#f
	)
)

(define (report-prime n elapsed-time)
	(display n)
	(display " *** ")
	(display elapsed-time)
	(newline)
)

(define (expmod base exp m)
	(cond ((= exp 0) 1)
		((even? exp)
			(remainder (square (expmod base (/ exp 2) m)) m))
		(else (remainder (* base (expmod base (- exp 1) m)) m))
	)
)

(define (fermat-test n)
	(define (try-it a)
		(= (expmod a n n) a))
	(try-it (+ 1 (random (- n 1))))
)	
	
(define (fast-prime? n times)
	(cond ((= times 0) true)
		((fermat-test n) (fast-prime? n (- times 1)))
		(else #f)
	)
)


(define (search-for-primes lower-limit counter)
	
	(define (iter lower-limit counter)
		(if (> counter 0)
			(if (timed-prime-test lower-limit)
				(iter (+ lower-limit 2) (- counter 1))
				(iter (+ lower-limit 2) counter)
			)
			(display " end")
		)
	)
	(if (even? lower-limit) 
		(iter (+ lower-limit 1) counter) 
		(iter (+ lower-limit 1) counter)
	)
)
