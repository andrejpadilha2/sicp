(define (random-in-range low high)
	(let ((range (- high low)))
		(+ low (random range))
	)
)

(define (estimate-integral x1 x2 y1 y2 trials)
	(define area-rectangle (* (- x2 x1) (- y2 y1)))
	(define area-pred-args (lambda () (area-predicate (random-in-range x1 x2) (random-in-range y1 y2))))
	(* area-rectangle (monte-carlo trials area-pred-args))
)
	
(define (area-predicate x y)
	(<  (+ (expt (- x 5) 2) (expt (- y 7) 2)) (expt 3 2))
)

(define (monte-carlo trials experiment)
	(define (iter trials-remaining trials-passed)
		(cond ( (= trials-remaining 0)
				(/ trials-passed trials))
			((experiment)
				(iter (- trials-remaining 1) (+ trials-passed 1)))
			(else
				(iter (- trials-remaining 1) trials-passed))
		)
	)
	(iter trials 0)
)

(define pi-estimate (/ (estimate-integral 2.0 8.0 4.0 10.0 10000) 9.0))
